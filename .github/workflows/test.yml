name: Home Server CI/CD

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]

env:
  GRAFANA_PASSWORD: test123
  TZ: Europe/Budapest
  PLEX_CLAIM: ""
  CLOUDFLARE_TUNNEL_TOKEN: "test-token"

jobs:
  validate-setup:
    name: Validate Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Verify Docker Compose
      run: |
        echo "üîç Checking Docker Compose version..."
        docker compose version

    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Makefile syntax
      run: |
        echo "üîç Validating Makefile..."
        make --dry-run help
        echo "‚úÖ Makefile syntax is valid"
        
    - name: Validate Docker Compose syntax
      run: |
        echo "üîç Validating Docker Compose..."
        docker compose config > /dev/null
        echo "‚úÖ Docker Compose syntax is valid"
        
    - name: Check script permissions and syntax
      run: |
        echo "üîç Checking script files..."
        find scripts -name "*.sh" -exec bash -n {} \;
        echo "‚úÖ All scripts have valid syntax"
        
    - name: Test make commands exist
      run: |
        echo "üîç Testing make commands..."
        make --dry-run setup
        make --dry-run create-env
        make --dry-run start
        make --dry-run stop
        echo "‚úÖ All make commands are valid"
        
    - name: Validate environment variable usage
      run: |
        echo "üîç Validating environment variable usage..."
        
        # Check that scripts use variables correctly
        echo "Checking for proper variable substitution..."
        
        # Look for variables that should be using ${} syntax
        if grep -r "\$[A-Z_][A-Z0-9_]*[^{]" scripts/ --include="*.sh" | grep -v "grep" | grep -v "echo"; then
          echo "‚ö†Ô∏è  Found variables that might need \${} syntax:"
          grep -r "\$[A-Z_][A-Z0-9_]*[^{]" scripts/ --include="*.sh" | grep -v "grep" | grep -v "echo" || true
          echo "Consider using \${VARIABLE} syntax for consistency"
        else
          echo "‚úÖ Environment variable usage looks good"
        fi
        
        # Check that docker-compose.yml uses proper variable syntax
        if grep -E '\$[A-Z_]+[^{:]' docker-compose.yaml; then
          echo "‚ö†Ô∏è  Found variables in docker-compose that might need \${} syntax"
        else
          echo "‚úÖ Docker Compose environment variables look good"
        fi

  test-monitoring-stack:
    name: Test Monitoring Stack
    runs-on: ubuntu-latest
    needs: validate-setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test environment
      run: |
        echo "üèóÔ∏è Creating test environment..."
        mkdir -p test-volumes/{grafana,loki,prometheus}
        chmod 777 test-volumes/*
        
    - name: Create test Docker Compose
      run: |
        cat > docker-compose.test.yml << 'EOF'
        version: '3.8'
        
        services:
          grafana:
            image: grafana/grafana:latest
            container_name: grafana-test
            environment:
              - GF_SECURITY_ADMIN_USER=admin
              - GF_SECURITY_ADMIN_PASSWORD=test123
              - GF_USERS_ALLOW_SIGN_UP=false
            volumes:
              - ./test-volumes/grafana:/var/lib/grafana
            ports:
              - "3000:3000"
            networks:
              - test-network
              
          loki:
            image: grafana/loki:latest
            container_name: loki-test
            volumes:
              - ./test-volumes/loki:/loki
            ports:
              - "3100:3100"
            networks:
              - test-network
              
          prometheus:
            image: prom/prometheus:latest
            container_name: prometheus-test
            volumes:
              - ./test-volumes/prometheus:/prometheus
            ports:
              - "9090:9090"
            networks:
              - test-network
              
        networks:
          test-network:
            driver: bridge
        EOF
        
    - name: Start monitoring services
      run: |
        echo "üöÄ Starting monitoring stack..."
        docker compose -f docker-compose.test.yml up -d
        
    - name: Wait for services to be ready
      run: |
        echo "‚è≥ Waiting for services to start..."
        
        # Show what's running first
        docker compose -f docker-compose.test.yml ps
        
        # Wait for Grafana with better retry logic
        echo "Waiting for Grafana..."
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "‚úÖ Grafana is ready"
            break
          fi
          echo "Waiting for Grafana... ($timeout seconds left)"
          sleep 5
          timeout=$((timeout - 5))
        done
        
        if [ $timeout -eq 0 ]; then
          echo "‚ùå Grafana timeout - showing logs:"
          docker compose -f docker-compose.test.yml logs grafana
          exit 1
        fi
        
        # Wait for Loki
        echo "Waiting for Loki..."
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f -s http://localhost:3100/ready > /dev/null 2>&1; then
            echo "‚úÖ Loki is ready"
            break
          fi
          echo "Waiting for Loki... ($timeout seconds left)"
          sleep 5
          timeout=$((timeout - 5))
        done
        
        if [ $timeout -eq 0 ]; then
          echo "‚ùå Loki timeout - showing logs:"
          docker compose -f docker-compose.test.yml logs loki
          exit 1
        fi
        
        # Wait for Prometheus
        echo "Waiting for Prometheus..."
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f -s http://localhost:9090/-/healthy > /dev/null 2>&1; then
            echo "‚úÖ Prometheus is ready"
            break
          fi
          echo "Waiting for Prometheus... ($timeout seconds left)"
          sleep 5
          timeout=$((timeout - 5))
        done
        
        if [ $timeout -eq 0 ]; then
          echo "‚ùå Prometheus timeout - showing logs:"
          docker compose -f docker-compose.test.yml logs prometheus
          exit 1
        fi
        
    - name: Test service endpoints
      run: |
        echo "üß™ Testing service endpoints..."
        
        # Test Grafana
        echo "Testing Grafana..."
        curl -f http://localhost:3000/api/health
        echo "‚úÖ Grafana health check passed"
        
        # Test Grafana login
        response=$(curl -X POST -H "Content-Type: application/json" \
          -d '{"user":"admin","password":"test123"}' \
          http://localhost:3000/login 2>/dev/null || echo "failed")
        echo "‚úÖ Grafana login test completed"
        
        # Test Loki
        echo "Testing Loki..."
        curl -f http://localhost:3100/ready
        echo "‚úÖ Loki ready check passed"
        
        # Test Prometheus
        echo "Testing Prometheus..."
        curl -f http://localhost:9090/-/healthy
        echo "‚úÖ Prometheus health check passed"
        
        # Test Prometheus metrics
        curl -f http://localhost:9090/api/v1/query?query=up
        echo "‚úÖ Prometheus metrics query passed"
        
    - name: Show service logs on failure
      if: failure()
      run: |
        echo "‚ùå Service startup failed. Showing logs..."
        docker compose -f docker-compose.test.yml logs
        
    - name: Cleanup test environment
      if: always()
      run: |
        echo "üßπ Cleaning up..."
        docker compose -f docker-compose.test.yml down -v || true
        docker system prune -f || true

  test-scripts:
    name: Test Scripts
    runs-on: ubuntu-latest
    needs: validate-setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Make scripts executable
      run: |
        echo "üîß Making scripts executable..."
        find scripts -name "*.sh" -exec chmod +x {} \;
        ls -la scripts/**/*.sh
        
    - name: Test create-env script
      run: |
        echo "üß™ Testing create-env script..."
        ./scripts/create-env.sh
        
        # Check if .env file was created
        if [ -f ".env" ]; then
          echo "‚úÖ .env file created successfully"
          echo "Contents:"
          cat .env
        else
          echo "‚ùå .env file was not created"
          exit 1
        fi
        
    - name: Test script syntax
      run: |
        echo "üß™ Testing script syntax..."
        for script in scripts/**/*.sh; do
          echo "Checking $script..."
          bash -n "$script"
          echo "‚úÖ $script syntax is valid"
        done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-setup
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
        
    - name: Check for secrets in code
      run: |
        echo "üîç Checking for secrets..."
        
        # Check for actual hardcoded secrets (not variable assignments or examples)
        echo "Checking for hardcoded Cloudflare tokens..."
        if grep -rE "CLOUDFLARE_TUNNEL_TOKEN=[a-zA-Z0-9]{30,}" . --exclude-dir=.git --exclude="*.md" --exclude=".env*" --exclude-dir=".github"; then
          echo "‚ùå Found hardcoded Cloudflare tunnel token!"
          exit 1
        else
          echo "‚úÖ No hardcoded Cloudflare tokens found"
        fi
        
        # Check for other hardcoded secrets (not variable references)
        echo "üîç Checking for hardcoded passwords and keys..."
        if grep -rE "(password|secret|key|api_key)=['\"]?[a-zA-Z0-9!@#$%^&*]{10,}" . \
          --exclude-dir=.git \
          --exclude="*.md" \
          --exclude=".env*" \
          --exclude-dir=".github" \
          --exclude="docker-compose*.yml" \
          --exclude="Makefile" | grep -v "GRAFANA_PASSWORD=\${" | grep -v "PLEX_CLAIM=\${" | grep -v "admin123"; then
          echo "‚ö†Ô∏è  Found potential hardcoded secrets - please review"
        else
          echo "‚úÖ No hardcoded secrets found"
        fi
        
        echo "‚úÖ Security scan complete"

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test-monitoring-stack, test-scripts]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create full test environment
      run: |
        echo "üèóÔ∏è Creating integration test environment..."
        
        # Create test directory structure
        mkdir -p test-hdd/{plex/{config,transcode},media/{movies,tv,music}}
        mkdir -p test-hdd/{downloads/{complete,incomplete},backup,logs}
        mkdir -p test-hdd/cloudflared/config
        mkdir -p test-hdd/monitoring/{grafana/{data,config},loki/{data,config},promtail/config,prometheus/{data,config}}
        
        # Set permissions
        chmod -R 777 test-hdd/
        
    - name: Create integration docker-compose
      run: |
        # Create a simplified version for testing
        cat > docker-compose.integration.yml << 'EOF'
        version: '3.8'
        
        services:
          grafana:
            image: grafana/grafana:latest
            container_name: grafana-integration
            environment:
              - GF_SECURITY_ADMIN_USER=admin
              - GF_SECURITY_ADMIN_PASSWORD=test123
            volumes:
              - ./test-hdd/monitoring/grafana/data:/var/lib/grafana
            ports:
              - "3000:3000"
            networks:
              - integration-network
              
          loki:
            image: grafana/loki:latest
            container_name: loki-integration
            volumes:
              - ./test-hdd/monitoring/loki/data:/loki
            ports:
              - "3100:3100"
            networks:
              - integration-network
              
          prometheus:
            image: prom/prometheus:latest
            container_name: prometheus-integration
            volumes:
              - ./test-hdd/monitoring/prometheus/data:/prometheus
            ports:
              - "9090:9090"
            networks:
              - integration-network
              
        networks:
          integration-network:
            driver: bridge
        EOF
        
    - name: Test full stack integration
      run: |
        echo "üß™ Running integration tests..."
        
        # Start services
        docker compose -f docker-compose.integration.yml up -d
        
        # Show what's running
        echo "Started services:"
        docker compose -f docker-compose.integration.yml ps
        
        # Wait for Grafana with retry logic
        echo "Waiting for Grafana to be ready..."
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "‚úÖ Grafana is ready"
            break
          fi
          echo "Waiting for Grafana... ($timeout seconds left)"
          sleep 5
          timeout=$((timeout - 5))
        done
        
        if [ $timeout -eq 0 ]; then
          echo "‚ùå Grafana did not become ready in time"
          echo "Grafana logs:"
          docker compose -f docker-compose.integration.yml logs grafana
          exit 1
        fi
        
        # Wait for Loki with retry logic
        echo "Waiting for Loki to be ready..."
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f -s http://localhost:3100/ready > /dev/null 2>&1; then
            echo "‚úÖ Loki is ready"
            break
          fi
          echo "Waiting for Loki... ($timeout seconds left)"
          sleep 5
          timeout=$((timeout - 5))
        done
        
        if [ $timeout -eq 0 ]; then
          echo "‚ùå Loki did not become ready in time"
          echo "Loki logs:"
          docker compose -f docker-compose.integration.yml logs loki
          exit 1
        fi
        
        # Wait for Prometheus with retry logic
        echo "Waiting for Prometheus to be ready..."
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -f -s http://localhost:9090/-/healthy > /dev/null 2>&1; then
            echo "‚úÖ Prometheus is ready"
            break
          fi
          echo "Waiting for Prometheus... ($timeout seconds left)"
          sleep 5
          timeout=$((timeout - 5))
        done
        
        if [ $timeout -eq 0 ]; then
          echo "‚ùå Prometheus did not become ready in time"
          echo "Prometheus logs:"
          docker compose -f docker-compose.integration.yml logs prometheus
          exit 1
        fi
        
        # Test all endpoints one more time to be sure
        echo "üß™ Final endpoint validation..."
        curl -f http://localhost:3000/api/health && echo "‚úÖ Grafana final check passed"
        curl -f http://localhost:3100/ready && echo "‚úÖ Loki final check passed"
        curl -f http://localhost:9090/-/healthy && echo "‚úÖ Prometheus final check passed"
        
        echo "‚úÖ Integration tests passed!"
        
    - name: Cleanup integration test
      if: always()
      run: |
        docker compose -f docker-compose.integration.yml down -v || true
        rm -rf test-hdd || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [validate-setup, test-monitoring-stack, test-scripts, security-scan, integration-test]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "üìã Test Summary"
        echo "==============="
        
        # Check each job result
        validate_setup="${{ needs.validate-setup.result }}"
        test_monitoring="${{ needs.test-monitoring-stack.result }}"
        test_scripts="${{ needs.test-scripts.result }}"
        security_scan="${{ needs.security-scan.result }}"
        integration_test="${{ needs.integration-test.result }}"
        
        echo "üîç Configuration Validation: $validate_setup"
        echo "üìä Monitoring Stack Test: $test_monitoring"
        echo "üß™ Scripts Test: $test_scripts"
        echo "üîí Security Scan: $security_scan"
        echo "üîó Integration Test: $integration_test"
        
        # Determine overall result
        if [[ "$validate_setup" == "success" && "$test_monitoring" == "success" && "$test_scripts" == "success" && "$integration_test" == "success" ]]; then
          echo ""
          echo "üéâ All tests passed! Your home server setup is ready for deployment!"
          echo "‚úÖ Configuration is valid"
          echo "‚úÖ Monitoring stack works properly"
          echo "‚úÖ All scripts function correctly"
          echo "‚úÖ Integration tests passed"
          if [[ "$security_scan" == "success" ]]; then
            echo "‚úÖ No security issues found"
          else
            echo "‚ö†Ô∏è  Security scan had issues (check logs)"
          fi
          echo ""
          echo "üöÄ Safe to deploy to production!"
        else
          echo ""
          echo "‚ùå Some tests failed. Please check the logs above."
          exit 1
        fi